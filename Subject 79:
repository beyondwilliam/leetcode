class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        ans=False
        if len(board)==0 or len(board[0])==0:
            return ans
        if len(word)==0:
            return True
        M=len(board)
        N=len(board[0])
        for i in range(M):
            for j in range(N):
                if board[i][j]==word[0]:
                    if self.searchAround(board,i,j,word,0,[]):
                        return True
        return False
    
    def searchAround(self,board,i,j,word,k,path):
        if word[k]==board[i][j]:
            if k==len(word)-1:
                return True
            else:
                path.append([i,j])
                if i+1<len(board) and path.count([i+1,j])<1:
                    newpath=path[:]
                    if self.searchAround(board,i+1,j,word,k+1,newpath):
                        return True
                if i-1>=0 and path.count([i-1,j])<1:
                    newpath=path[:]
                    if self.searchAround(board,i-1,j,word,k+1,newpath):
                        return True
                if j+1<len(board[0]) and path.count([i,j+1])<1:
                    newpath=path[:]
                    if self.searchAround(board,i,j+1,word,k+1,newpath):
                        return True
                if j-1>=0 and path.count([i,j-1])<1:
                    newpath=path[:]
                    if self.searchAround(board,i,j-1,word,k+1,newpath):
                        return True
        else:
            return False
            
