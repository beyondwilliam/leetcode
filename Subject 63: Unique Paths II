class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if obstacleGrid==[] or obstacleGrid[0][0]==1:
            return 0
        m=len(obstacleGrid[0])
        n=len(obstacleGrid)
        if m==1:
            if obstacleGrid.count([1])>0:
                return 0
            else:
                return 1
        if n==1:
            if obstacleGrid[0].count(1)>0:
                return 0
            else:
                return 1
        for i in range(m):
            if obstacleGrid[0][i]==1:
                for j in range(i,m):
                    obstacleGrid[0][j]=0
                break
            else:
                obstacleGrid[0][i]=1
        for i in range(1,n):
            if obstacleGrid[i][0]==1:
                for j in range(i,n):
                    obstacleGrid[j][0]=0
                break
            else:
                obstacleGrid[i][0]=1
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[j][i]==1:
                    obstacleGrid[j][i]=0
                else:
                    obstacleGrid[j][i]=obstacleGrid[j-1][i]+obstacleGrid[j][i-1]
        return obstacleGrid[n-1][m-1]
